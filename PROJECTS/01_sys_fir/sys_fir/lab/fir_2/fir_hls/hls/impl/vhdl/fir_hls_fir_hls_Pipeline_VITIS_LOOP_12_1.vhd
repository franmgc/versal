-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fir_hls_fir_hls_Pipeline_VITIS_LOOP_12_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_stream_TVALID : IN STD_LOGIC;
    out_stream_TREADY : IN STD_LOGIC;
    shift_reg_6_reload : IN STD_LOGIC_VECTOR (28 downto 0);
    shift_reg_5_reload : IN STD_LOGIC_VECTOR (28 downto 0);
    shift_reg_4_reload : IN STD_LOGIC_VECTOR (28 downto 0);
    shift_reg_3_reload : IN STD_LOGIC_VECTOR (28 downto 0);
    shift_reg_2_reload : IN STD_LOGIC_VECTOR (28 downto 0);
    shift_reg_1_reload : IN STD_LOGIC_VECTOR (28 downto 0);
    shift_reg_reload : IN STD_LOGIC_VECTOR (28 downto 0);
    in_stream_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    in_stream_TREADY : OUT STD_LOGIC;
    out_stream_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_stream_TVALID : OUT STD_LOGIC );
end;


architecture behav of fir_hls_fir_hls_Pipeline_VITIS_LOOP_12_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal icmp_ln12_fu_309_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal in_stream_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal out_stream_TDATA_blk_n : STD_LOGIC;
    signal acc_fu_467_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_reg_655 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_fu_82 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    signal i_2_fu_303_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal shift_reg_14_in_fu_86 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000000";
    signal trunc_ln10_fu_341_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal shift_reg_16_in_fu_90 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000000";
    signal shift_reg_18_in_fu_94 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000000";
    signal shift_reg_fu_98 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000000";
    signal shift_reg_15_in_fu_102 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000000";
    signal shift_reg_17_in_fu_106 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000000";
    signal shift_reg_19_in_fu_110 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000000";
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal trunc_ln23_fu_345_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln23_1_fu_357_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal trunc_ln23_2_fu_369_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal trunc_ln23_3_fu_381_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal trunc_ln23_4_fu_393_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal trunc_ln23_5_fu_405_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal shl_ln23_5_fu_409_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln23_7_fu_423_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln23_2_fu_373_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln23_4_fu_397_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln23_1_fu_437_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln23_fu_431_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln23_3_fu_385_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln_fu_349_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_361_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln23_fu_417_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln23_4_fu_455_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln23_3_fu_449_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln23_5_fu_461_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln23_2_fu_443_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component fir_hls_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component fir_hls_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    i_fu_82_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_82 <= ap_const_lv7_0;
                elsif (((icmp_ln12_fu_309_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    i_fu_82 <= i_2_fu_303_p2;
                end if;
            end if; 
        end if;
    end process;

    shift_reg_14_in_fu_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    shift_reg_14_in_fu_86 <= shift_reg_reload;
                elsif (((icmp_ln12_fu_309_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    shift_reg_14_in_fu_86 <= trunc_ln10_fu_341_p1;
                end if;
            end if; 
        end if;
    end process;

    shift_reg_15_in_fu_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    shift_reg_15_in_fu_102 <= shift_reg_1_reload;
                elsif (((icmp_ln12_fu_309_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    shift_reg_15_in_fu_102 <= shift_reg_14_in_fu_86;
                end if;
            end if; 
        end if;
    end process;

    shift_reg_16_in_fu_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    shift_reg_16_in_fu_90 <= shift_reg_2_reload;
                elsif (((icmp_ln12_fu_309_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    shift_reg_16_in_fu_90 <= shift_reg_15_in_fu_102;
                end if;
            end if; 
        end if;
    end process;

    shift_reg_17_in_fu_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    shift_reg_17_in_fu_106 <= shift_reg_3_reload;
                elsif (((icmp_ln12_fu_309_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    shift_reg_17_in_fu_106 <= shift_reg_16_in_fu_90;
                end if;
            end if; 
        end if;
    end process;

    shift_reg_18_in_fu_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    shift_reg_18_in_fu_94 <= shift_reg_4_reload;
                elsif (((icmp_ln12_fu_309_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    shift_reg_18_in_fu_94 <= shift_reg_17_in_fu_106;
                end if;
            end if; 
        end if;
    end process;

    shift_reg_19_in_fu_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    shift_reg_19_in_fu_110 <= shift_reg_5_reload;
                elsif (((icmp_ln12_fu_309_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    shift_reg_19_in_fu_110 <= shift_reg_18_in_fu_94;
                end if;
            end if; 
        end if;
    end process;

    shift_reg_fu_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    shift_reg_fu_98 <= shift_reg_6_reload;
                elsif (((icmp_ln12_fu_309_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    shift_reg_fu_98 <= shift_reg_19_in_fu_110;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    acc_reg_655(31 downto 3) <= acc_fu_467_p2(31 downto 3);
            end if;
        end if;
    end process;
    acc_reg_655(2 downto 0) <= "000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    acc_fu_467_p2 <= std_logic_vector(unsigned(add_ln23_5_fu_461_p2) + unsigned(add_ln23_2_fu_443_p2));
    add_ln23_1_fu_437_p2 <= std_logic_vector(unsigned(shl_ln23_2_fu_373_p3) + unsigned(shl_ln23_4_fu_397_p3));
    add_ln23_2_fu_443_p2 <= std_logic_vector(unsigned(add_ln23_1_fu_437_p2) + unsigned(add_ln23_fu_431_p2));
    add_ln23_3_fu_449_p2 <= std_logic_vector(unsigned(shl_ln23_3_fu_385_p3) + unsigned(shl_ln_fu_349_p3));
    add_ln23_4_fu_455_p2 <= std_logic_vector(unsigned(tmp_fu_361_p3) + unsigned(shl_ln23_fu_417_p2));
    add_ln23_5_fu_461_p2 <= std_logic_vector(unsigned(add_ln23_4_fu_455_p2) + unsigned(add_ln23_3_fu_449_p2));
    add_ln23_fu_431_p2 <= std_logic_vector(unsigned(shl_ln23_5_fu_409_p3) + unsigned(shl_ln23_7_fu_423_p3));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_block_state2_pp0_stage0_iter1, ap_block_state3_pp0_stage0_iter2)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_pp0_stage0_iter2)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_block_state2_pp0_stage0_iter1, out_stream_TREADY, ap_block_state3_pp0_stage0_iter2)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and ((out_stream_TREADY = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state3_pp0_stage0_iter2))) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_block_state2_pp0_stage0_iter1, out_stream_TREADY, ap_block_state3_pp0_stage0_iter2)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and ((out_stream_TREADY = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state3_pp0_stage0_iter2))) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1)));
    end process;


    ap_block_state2_pp0_stage0_iter1_assign_proc : process(in_stream_TVALID, icmp_ln12_fu_309_p2)
    begin
                ap_block_state2_pp0_stage0_iter1 <= ((icmp_ln12_fu_309_p2 = ap_const_lv1_0) and (in_stream_TVALID = ap_const_logic_0));
    end process;


    ap_block_state3_pp0_stage0_iter2_assign_proc : process(out_stream_TREADY)
    begin
                ap_block_state3_pp0_stage0_iter2 <= (out_stream_TREADY = ap_const_logic_0);
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln12_fu_309_p2, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln12_fu_309_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    i_2_fu_303_p2 <= std_logic_vector(unsigned(i_fu_82) + unsigned(ap_const_lv7_1));
    icmp_ln12_fu_309_p2 <= "1" when (i_fu_82 = ap_const_lv7_40) else "0";

    in_stream_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, in_stream_TVALID, icmp_ln12_fu_309_p2, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln12_fu_309_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_stream_TDATA_blk_n <= in_stream_TVALID;
        else 
            in_stream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_stream_TREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln12_fu_309_p2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln12_fu_309_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_stream_TREADY <= ap_const_logic_1;
        else 
            in_stream_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    out_stream_TDATA <= acc_reg_655;

    out_stream_TDATA_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, out_stream_TREADY, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            out_stream_TDATA_blk_n <= out_stream_TREADY;
        else 
            out_stream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    out_stream_TVALID_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            out_stream_TVALID <= ap_const_logic_1;
        else 
            out_stream_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    shl_ln23_2_fu_373_p3 <= (trunc_ln23_2_fu_369_p1 & ap_const_lv5_0);
    shl_ln23_3_fu_385_p3 <= (trunc_ln23_3_fu_381_p1 & ap_const_lv7_0);
    shl_ln23_4_fu_397_p3 <= (trunc_ln23_4_fu_393_p1 & ap_const_lv6_0);
    shl_ln23_5_fu_409_p3 <= (trunc_ln23_5_fu_405_p1 & ap_const_lv4_0);
    shl_ln23_7_fu_423_p3 <= (shift_reg_fu_98 & ap_const_lv3_0);
    shl_ln23_fu_417_p2 <= std_logic_vector(shift_left(unsigned(in_stream_TDATA),to_integer(unsigned('0' & ap_const_lv32_A(31-1 downto 0)))));
    shl_ln_fu_349_p3 <= (trunc_ln23_fu_345_p1 & ap_const_lv8_0);
    tmp_fu_361_p3 <= (trunc_ln23_1_fu_357_p1 & ap_const_lv9_0);
    trunc_ln10_fu_341_p1 <= in_stream_TDATA(29 - 1 downto 0);
    trunc_ln23_1_fu_357_p1 <= shift_reg_14_in_fu_86(23 - 1 downto 0);
    trunc_ln23_2_fu_369_p1 <= shift_reg_18_in_fu_94(27 - 1 downto 0);
    trunc_ln23_3_fu_381_p1 <= shift_reg_16_in_fu_90(25 - 1 downto 0);
    trunc_ln23_4_fu_393_p1 <= shift_reg_17_in_fu_106(26 - 1 downto 0);
    trunc_ln23_5_fu_405_p1 <= shift_reg_19_in_fu_110(28 - 1 downto 0);
    trunc_ln23_fu_345_p1 <= shift_reg_15_in_fu_102(24 - 1 downto 0);
end behav;
