// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fir_hls_fir_hls,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvc1902-vsva2197-2MP-e-S,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.742000,HLS_SYN_LAT=80,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=499,HLS_SYN_LUT=666,HLS_VERSION=2023_2}" *)

module fir_hls (
        ap_clk,
        ap_rst_n,
        in_stream_TDATA,
        in_stream_TVALID,
        in_stream_TREADY,
        out_stream_TDATA,
        out_stream_TVALID,
        out_stream_TREADY,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 4;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [31:0] in_stream_TDATA;
input   in_stream_TVALID;
output   in_stream_TREADY;
output  [31:0] out_stream_TDATA;
output   out_stream_TVALID;
input   out_stream_TREADY;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

(* shreg_extract = "no" *) reg    ap_rst_reg_2;
(* shreg_extract = "no" *) reg    ap_rst_reg_1;
(* shreg_extract = "no" *) reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
wire    ap_continue;
reg    ap_done_reg;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire    grp_fir_hls_Pipeline_1_fu_66_ap_start;
wire    grp_fir_hls_Pipeline_1_fu_66_ap_done;
wire    grp_fir_hls_Pipeline_1_fu_66_ap_idle;
wire    grp_fir_hls_Pipeline_1_fu_66_ap_ready;
wire   [28:0] grp_fir_hls_Pipeline_1_fu_66_shift_reg_6_out;
wire    grp_fir_hls_Pipeline_1_fu_66_shift_reg_6_out_ap_vld;
wire   [28:0] grp_fir_hls_Pipeline_1_fu_66_shift_reg_5_out;
wire    grp_fir_hls_Pipeline_1_fu_66_shift_reg_5_out_ap_vld;
wire   [28:0] grp_fir_hls_Pipeline_1_fu_66_shift_reg_4_out;
wire    grp_fir_hls_Pipeline_1_fu_66_shift_reg_4_out_ap_vld;
wire   [28:0] grp_fir_hls_Pipeline_1_fu_66_shift_reg_3_out;
wire    grp_fir_hls_Pipeline_1_fu_66_shift_reg_3_out_ap_vld;
wire   [28:0] grp_fir_hls_Pipeline_1_fu_66_shift_reg_2_out;
wire    grp_fir_hls_Pipeline_1_fu_66_shift_reg_2_out_ap_vld;
wire   [28:0] grp_fir_hls_Pipeline_1_fu_66_shift_reg_1_out;
wire    grp_fir_hls_Pipeline_1_fu_66_shift_reg_1_out_ap_vld;
wire   [28:0] grp_fir_hls_Pipeline_1_fu_66_shift_reg_out;
wire    grp_fir_hls_Pipeline_1_fu_66_shift_reg_out_ap_vld;
wire    grp_fir_hls_Pipeline_VITIS_LOOP_12_1_fu_77_ap_start;
wire    grp_fir_hls_Pipeline_VITIS_LOOP_12_1_fu_77_ap_done;
wire    grp_fir_hls_Pipeline_VITIS_LOOP_12_1_fu_77_ap_idle;
wire    grp_fir_hls_Pipeline_VITIS_LOOP_12_1_fu_77_ap_ready;
wire    grp_fir_hls_Pipeline_VITIS_LOOP_12_1_fu_77_out_stream_TREADY;
wire    grp_fir_hls_Pipeline_VITIS_LOOP_12_1_fu_77_in_stream_TREADY;
wire   [31:0] grp_fir_hls_Pipeline_VITIS_LOOP_12_1_fu_77_out_stream_TDATA;
wire    grp_fir_hls_Pipeline_VITIS_LOOP_12_1_fu_77_out_stream_TVALID;
reg    grp_fir_hls_Pipeline_1_fu_66_ap_start_reg;
reg    ap_block_state1_ignore_call14;
reg   [28:0] shift_reg_6_loc_fu_62;
wire    ap_CS_fsm_state2;
reg   [28:0] shift_reg_5_loc_fu_58;
reg   [28:0] shift_reg_4_loc_fu_54;
reg   [28:0] shift_reg_3_loc_fu_50;
reg   [28:0] shift_reg_2_loc_fu_46;
reg   [28:0] shift_reg_1_loc_fu_42;
reg   [28:0] shift_reg_loc_fu_38;
reg    grp_fir_hls_Pipeline_VITIS_LOOP_12_1_fu_77_ap_start_reg;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    regslice_both_out_stream_U_apdone_blk;
reg   [4:0] ap_NS_fsm;
reg    ap_block_state1;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
reg    ap_ST_fsm_state5_blk;
wire    regslice_both_in_stream_U_apdone_blk;
wire   [31:0] in_stream_TDATA_int_regslice;
wire    in_stream_TVALID_int_regslice;
reg    in_stream_TREADY_int_regslice;
wire    regslice_both_in_stream_U_ack_in;
wire    out_stream_TREADY_int_regslice;
wire    regslice_both_out_stream_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_rst_reg_2 = 1'b1;
#0 ap_rst_reg_1 = 1'b1;
#0 ap_rst_n_inv = 1'b1;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 5'd1;
#0 grp_fir_hls_Pipeline_1_fu_66_ap_start_reg = 1'b0;
#0 grp_fir_hls_Pipeline_VITIS_LOOP_12_1_fu_77_ap_start_reg = 1'b0;
end

fir_hls_fir_hls_Pipeline_1 grp_fir_hls_Pipeline_1_fu_66(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_fir_hls_Pipeline_1_fu_66_ap_start),
    .ap_done(grp_fir_hls_Pipeline_1_fu_66_ap_done),
    .ap_idle(grp_fir_hls_Pipeline_1_fu_66_ap_idle),
    .ap_ready(grp_fir_hls_Pipeline_1_fu_66_ap_ready),
    .shift_reg_6_out(grp_fir_hls_Pipeline_1_fu_66_shift_reg_6_out),
    .shift_reg_6_out_ap_vld(grp_fir_hls_Pipeline_1_fu_66_shift_reg_6_out_ap_vld),
    .shift_reg_5_out(grp_fir_hls_Pipeline_1_fu_66_shift_reg_5_out),
    .shift_reg_5_out_ap_vld(grp_fir_hls_Pipeline_1_fu_66_shift_reg_5_out_ap_vld),
    .shift_reg_4_out(grp_fir_hls_Pipeline_1_fu_66_shift_reg_4_out),
    .shift_reg_4_out_ap_vld(grp_fir_hls_Pipeline_1_fu_66_shift_reg_4_out_ap_vld),
    .shift_reg_3_out(grp_fir_hls_Pipeline_1_fu_66_shift_reg_3_out),
    .shift_reg_3_out_ap_vld(grp_fir_hls_Pipeline_1_fu_66_shift_reg_3_out_ap_vld),
    .shift_reg_2_out(grp_fir_hls_Pipeline_1_fu_66_shift_reg_2_out),
    .shift_reg_2_out_ap_vld(grp_fir_hls_Pipeline_1_fu_66_shift_reg_2_out_ap_vld),
    .shift_reg_1_out(grp_fir_hls_Pipeline_1_fu_66_shift_reg_1_out),
    .shift_reg_1_out_ap_vld(grp_fir_hls_Pipeline_1_fu_66_shift_reg_1_out_ap_vld),
    .shift_reg_out(grp_fir_hls_Pipeline_1_fu_66_shift_reg_out),
    .shift_reg_out_ap_vld(grp_fir_hls_Pipeline_1_fu_66_shift_reg_out_ap_vld)
);

fir_hls_fir_hls_Pipeline_VITIS_LOOP_12_1 grp_fir_hls_Pipeline_VITIS_LOOP_12_1_fu_77(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_fir_hls_Pipeline_VITIS_LOOP_12_1_fu_77_ap_start),
    .ap_done(grp_fir_hls_Pipeline_VITIS_LOOP_12_1_fu_77_ap_done),
    .ap_idle(grp_fir_hls_Pipeline_VITIS_LOOP_12_1_fu_77_ap_idle),
    .ap_ready(grp_fir_hls_Pipeline_VITIS_LOOP_12_1_fu_77_ap_ready),
    .in_stream_TVALID(in_stream_TVALID_int_regslice),
    .out_stream_TREADY(grp_fir_hls_Pipeline_VITIS_LOOP_12_1_fu_77_out_stream_TREADY),
    .shift_reg_6_reload(shift_reg_6_loc_fu_62),
    .shift_reg_5_reload(shift_reg_5_loc_fu_58),
    .shift_reg_4_reload(shift_reg_4_loc_fu_54),
    .shift_reg_3_reload(shift_reg_3_loc_fu_50),
    .shift_reg_2_reload(shift_reg_2_loc_fu_46),
    .shift_reg_1_reload(shift_reg_1_loc_fu_42),
    .shift_reg_reload(shift_reg_loc_fu_38),
    .in_stream_TDATA(in_stream_TDATA_int_regslice),
    .in_stream_TREADY(grp_fir_hls_Pipeline_VITIS_LOOP_12_1_fu_77_in_stream_TREADY),
    .out_stream_TDATA(grp_fir_hls_Pipeline_VITIS_LOOP_12_1_fu_77_out_stream_TDATA),
    .out_stream_TVALID(grp_fir_hls_Pipeline_VITIS_LOOP_12_1_fu_77_out_stream_TVALID)
);

fir_hls_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_continue(ap_continue),
    .ap_idle(ap_idle)
);

fir_hls_regslice_both #(
    .DataWidth( 32 ))
regslice_both_in_stream_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in_stream_TDATA),
    .vld_in(in_stream_TVALID),
    .ack_in(regslice_both_in_stream_U_ack_in),
    .data_out(in_stream_TDATA_int_regslice),
    .vld_out(in_stream_TVALID_int_regslice),
    .ack_out(in_stream_TREADY_int_regslice),
    .apdone_blk(regslice_both_in_stream_U_apdone_blk)
);

fir_hls_regslice_both #(
    .DataWidth( 32 ))
regslice_both_out_stream_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(grp_fir_hls_Pipeline_VITIS_LOOP_12_1_fu_77_out_stream_TDATA),
    .vld_in(grp_fir_hls_Pipeline_VITIS_LOOP_12_1_fu_77_out_stream_TVALID),
    .ack_in(out_stream_TREADY_int_regslice),
    .data_out(out_stream_TDATA),
    .vld_out(regslice_both_out_stream_U_vld_out),
    .ack_out(out_stream_TREADY),
    .apdone_blk(regslice_both_out_stream_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state5) & (regslice_both_out_stream_U_apdone_blk == 1'b0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_fir_hls_Pipeline_1_fu_66_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1_ignore_call14))) begin
            grp_fir_hls_Pipeline_1_fu_66_ap_start_reg <= 1'b1;
        end else if ((grp_fir_hls_Pipeline_1_fu_66_ap_ready == 1'b1)) begin
            grp_fir_hls_Pipeline_1_fu_66_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_fir_hls_Pipeline_VITIS_LOOP_12_1_fu_77_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            grp_fir_hls_Pipeline_VITIS_LOOP_12_1_fu_77_ap_start_reg <= 1'b1;
        end else if ((grp_fir_hls_Pipeline_VITIS_LOOP_12_1_fu_77_ap_ready == 1'b1)) begin
            grp_fir_hls_Pipeline_VITIS_LOOP_12_1_fu_77_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    ap_rst_n_inv <= ap_rst_reg_1;
end

always @ (posedge ap_clk) begin
    ap_rst_reg_1 <= ap_rst_reg_2;
end

always @ (posedge ap_clk) begin
    ap_rst_reg_2 <= ~ap_rst_n;
end

always @ (posedge ap_clk) begin
    if (((grp_fir_hls_Pipeline_1_fu_66_shift_reg_1_out_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        shift_reg_1_loc_fu_42 <= grp_fir_hls_Pipeline_1_fu_66_shift_reg_1_out;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_fir_hls_Pipeline_1_fu_66_shift_reg_2_out_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        shift_reg_2_loc_fu_46 <= grp_fir_hls_Pipeline_1_fu_66_shift_reg_2_out;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_fir_hls_Pipeline_1_fu_66_shift_reg_3_out_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        shift_reg_3_loc_fu_50 <= grp_fir_hls_Pipeline_1_fu_66_shift_reg_3_out;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_fir_hls_Pipeline_1_fu_66_shift_reg_4_out_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        shift_reg_4_loc_fu_54 <= grp_fir_hls_Pipeline_1_fu_66_shift_reg_4_out;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_fir_hls_Pipeline_1_fu_66_shift_reg_5_out_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        shift_reg_5_loc_fu_58 <= grp_fir_hls_Pipeline_1_fu_66_shift_reg_5_out;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_fir_hls_Pipeline_1_fu_66_shift_reg_6_out_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        shift_reg_6_loc_fu_62 <= grp_fir_hls_Pipeline_1_fu_66_shift_reg_6_out;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_fir_hls_Pipeline_1_fu_66_shift_reg_out_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        shift_reg_loc_fu_38 <= grp_fir_hls_Pipeline_1_fu_66_shift_reg_out;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((grp_fir_hls_Pipeline_1_fu_66_ap_done == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

assign ap_ST_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((grp_fir_hls_Pipeline_VITIS_LOOP_12_1_fu_77_ap_done == 1'b0)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if ((regslice_both_out_stream_U_apdone_blk == 1'b1)) begin
        ap_ST_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_fsm_state5_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (regslice_both_out_stream_U_apdone_blk == 1'b0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (regslice_both_out_stream_U_apdone_blk == 1'b0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        in_stream_TREADY_int_regslice = grp_fir_hls_Pipeline_VITIS_LOOP_12_1_fu_77_in_stream_TREADY;
    end else begin
        in_stream_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_fir_hls_Pipeline_1_fu_66_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((grp_fir_hls_Pipeline_VITIS_LOOP_12_1_fu_77_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (regslice_both_out_stream_U_apdone_blk == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_block_state1_ignore_call14 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

assign grp_fir_hls_Pipeline_1_fu_66_ap_start = grp_fir_hls_Pipeline_1_fu_66_ap_start_reg;

assign grp_fir_hls_Pipeline_VITIS_LOOP_12_1_fu_77_ap_start = grp_fir_hls_Pipeline_VITIS_LOOP_12_1_fu_77_ap_start_reg;

assign grp_fir_hls_Pipeline_VITIS_LOOP_12_1_fu_77_out_stream_TREADY = (out_stream_TREADY_int_regslice & ap_CS_fsm_state4);

assign in_stream_TREADY = regslice_both_in_stream_U_ack_in;

assign out_stream_TVALID = regslice_both_out_stream_U_vld_out;


reg find_kernel_block = 0;
// synthesis translate_off
`include "fir_hls_hls_deadlock_kernel_monitor_top.vh"
// synthesis translate_on

endmodule //fir_hls

