// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module fir_hls_fir_hls_Pipeline_VITIS_LOOP_12_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_stream_TVALID,
        out_stream_TREADY,
        shift_reg_6_reload,
        shift_reg_5_reload,
        shift_reg_4_reload,
        shift_reg_3_reload,
        shift_reg_2_reload,
        shift_reg_1_reload,
        shift_reg_reload,
        in_stream_TDATA,
        in_stream_TREADY,
        out_stream_TDATA,
        out_stream_TVALID
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   in_stream_TVALID;
input   out_stream_TREADY;
input  [28:0] shift_reg_6_reload;
input  [28:0] shift_reg_5_reload;
input  [28:0] shift_reg_4_reload;
input  [28:0] shift_reg_3_reload;
input  [28:0] shift_reg_2_reload;
input  [28:0] shift_reg_1_reload;
input  [28:0] shift_reg_reload;
input  [31:0] in_stream_TDATA;
output   in_stream_TREADY;
output  [31:0] out_stream_TDATA;
output   out_stream_TVALID;

reg ap_idle;
reg in_stream_TREADY;
reg out_stream_TVALID;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire   [0:0] icmp_ln12_fu_309_p2;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    in_stream_TDATA_blk_n;
wire    ap_block_pp0_stage0;
reg    out_stream_TDATA_blk_n;
wire   [31:0] acc_fu_467_p2;
reg   [31:0] acc_reg_655;
reg    ap_block_pp0_stage0_11001;
reg   [6:0] i_fu_82;
wire   [6:0] i_2_fu_303_p2;
wire    ap_loop_init;
reg   [28:0] shift_reg_14_in_fu_86;
wire   [28:0] trunc_ln10_fu_341_p1;
reg   [28:0] shift_reg_16_in_fu_90;
reg   [28:0] shift_reg_18_in_fu_94;
reg   [28:0] shift_reg_fu_98;
reg   [28:0] shift_reg_15_in_fu_102;
reg   [28:0] shift_reg_17_in_fu_106;
reg   [28:0] shift_reg_19_in_fu_110;
reg    ap_block_pp0_stage0_01001;
wire   [23:0] trunc_ln23_fu_345_p1;
wire   [22:0] trunc_ln23_1_fu_357_p1;
wire   [26:0] trunc_ln23_2_fu_369_p1;
wire   [24:0] trunc_ln23_3_fu_381_p1;
wire   [25:0] trunc_ln23_4_fu_393_p1;
wire   [27:0] trunc_ln23_5_fu_405_p1;
wire   [31:0] shl_ln23_5_fu_409_p3;
wire   [31:0] shl_ln23_7_fu_423_p3;
wire   [31:0] shl_ln23_2_fu_373_p3;
wire   [31:0] shl_ln23_4_fu_397_p3;
wire   [31:0] add_ln23_1_fu_437_p2;
wire   [31:0] add_ln23_fu_431_p2;
wire   [31:0] shl_ln23_3_fu_385_p3;
wire   [31:0] shl_ln_fu_349_p3;
wire   [31:0] tmp_fu_361_p3;
wire   [31:0] shl_ln23_fu_417_p2;
wire   [31:0] add_ln23_4_fu_455_p2;
wire   [31:0] add_ln23_3_fu_449_p2;
wire   [31:0] add_ln23_5_fu_461_p2;
wire   [31:0] add_ln23_2_fu_443_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 i_fu_82 = 7'd0;
#0 shift_reg_14_in_fu_86 = 29'd0;
#0 shift_reg_16_in_fu_90 = 29'd0;
#0 shift_reg_18_in_fu_94 = 29'd0;
#0 shift_reg_fu_98 = 29'd0;
#0 shift_reg_15_in_fu_102 = 29'd0;
#0 shift_reg_17_in_fu_106 = 29'd0;
#0 shift_reg_19_in_fu_110 = 29'd0;
#0 ap_done_reg = 1'b0;
end

fir_hls_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_fu_82 <= 7'd0;
        end else if (((icmp_ln12_fu_309_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            i_fu_82 <= i_2_fu_303_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            shift_reg_14_in_fu_86 <= shift_reg_reload;
        end else if (((icmp_ln12_fu_309_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            shift_reg_14_in_fu_86 <= trunc_ln10_fu_341_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            shift_reg_15_in_fu_102 <= shift_reg_1_reload;
        end else if (((icmp_ln12_fu_309_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            shift_reg_15_in_fu_102 <= shift_reg_14_in_fu_86;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            shift_reg_16_in_fu_90 <= shift_reg_2_reload;
        end else if (((icmp_ln12_fu_309_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            shift_reg_16_in_fu_90 <= shift_reg_15_in_fu_102;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            shift_reg_17_in_fu_106 <= shift_reg_3_reload;
        end else if (((icmp_ln12_fu_309_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            shift_reg_17_in_fu_106 <= shift_reg_16_in_fu_90;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            shift_reg_18_in_fu_94 <= shift_reg_4_reload;
        end else if (((icmp_ln12_fu_309_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            shift_reg_18_in_fu_94 <= shift_reg_17_in_fu_106;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            shift_reg_19_in_fu_110 <= shift_reg_5_reload;
        end else if (((icmp_ln12_fu_309_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            shift_reg_19_in_fu_110 <= shift_reg_18_in_fu_94;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            shift_reg_fu_98 <= shift_reg_6_reload;
        end else if (((icmp_ln12_fu_309_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            shift_reg_fu_98 <= shift_reg_19_in_fu_110;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        acc_reg_655[31 : 3] <= acc_fu_467_p2[31 : 3];
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln12_fu_309_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln12_fu_309_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_stream_TDATA_blk_n = in_stream_TVALID;
    end else begin
        in_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln12_fu_309_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_stream_TREADY = 1'b1;
    end else begin
        in_stream_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        out_stream_TDATA_blk_n = out_stream_TREADY;
    end else begin
        out_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        out_stream_TVALID = 1'b1;
    end else begin
        out_stream_TVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign acc_fu_467_p2 = (add_ln23_5_fu_461_p2 + add_ln23_2_fu_443_p2);

assign add_ln23_1_fu_437_p2 = (shl_ln23_2_fu_373_p3 + shl_ln23_4_fu_397_p3);

assign add_ln23_2_fu_443_p2 = (add_ln23_1_fu_437_p2 + add_ln23_fu_431_p2);

assign add_ln23_3_fu_449_p2 = (shl_ln23_3_fu_385_p3 + shl_ln_fu_349_p3);

assign add_ln23_4_fu_455_p2 = (tmp_fu_361_p3 + shl_ln23_fu_417_p2);

assign add_ln23_5_fu_461_p2 = (add_ln23_4_fu_455_p2 + add_ln23_3_fu_449_p2);

assign add_ln23_fu_431_p2 = (shl_ln23_5_fu_409_p3 + shl_ln23_7_fu_423_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter2 == 1'b1) & ((out_stream_TREADY == 1'b0) | (1'b1 == ap_block_state3_pp0_stage0_iter2))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter2 == 1'b1) & ((out_stream_TREADY == 1'b0) | (1'b1 == ap_block_state3_pp0_stage0_iter2))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((icmp_ln12_fu_309_p2 == 1'd0) & (in_stream_TVALID == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = (out_stream_TREADY == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign i_2_fu_303_p2 = (i_fu_82 + 7'd1);

assign icmp_ln12_fu_309_p2 = ((i_fu_82 == 7'd64) ? 1'b1 : 1'b0);

assign out_stream_TDATA = acc_reg_655;

assign shl_ln23_2_fu_373_p3 = {{trunc_ln23_2_fu_369_p1}, {5'd0}};

assign shl_ln23_3_fu_385_p3 = {{trunc_ln23_3_fu_381_p1}, {7'd0}};

assign shl_ln23_4_fu_397_p3 = {{trunc_ln23_4_fu_393_p1}, {6'd0}};

assign shl_ln23_5_fu_409_p3 = {{trunc_ln23_5_fu_405_p1}, {4'd0}};

assign shl_ln23_7_fu_423_p3 = {{shift_reg_fu_98}, {3'd0}};

assign shl_ln23_fu_417_p2 = in_stream_TDATA << 32'd10;

assign shl_ln_fu_349_p3 = {{trunc_ln23_fu_345_p1}, {8'd0}};

assign tmp_fu_361_p3 = {{trunc_ln23_1_fu_357_p1}, {9'd0}};

assign trunc_ln10_fu_341_p1 = in_stream_TDATA[28:0];

assign trunc_ln23_1_fu_357_p1 = shift_reg_14_in_fu_86[22:0];

assign trunc_ln23_2_fu_369_p1 = shift_reg_18_in_fu_94[26:0];

assign trunc_ln23_3_fu_381_p1 = shift_reg_16_in_fu_90[24:0];

assign trunc_ln23_4_fu_393_p1 = shift_reg_17_in_fu_106[25:0];

assign trunc_ln23_5_fu_405_p1 = shift_reg_19_in_fu_110[27:0];

assign trunc_ln23_fu_345_p1 = shift_reg_15_in_fu_102[23:0];

always @ (posedge ap_clk) begin
    acc_reg_655[2:0] <= 3'b000;
end

endmodule //fir_hls_fir_hls_Pipeline_VITIS_LOOP_12_1
